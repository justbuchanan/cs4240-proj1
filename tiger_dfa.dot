digraph tiger {
	//	start state
	S;

	//	syntax error
	//Error [color=red, shape=diamond];

	//	token types
	node [shape=doublecircle];
	S -> COMMA [label=","];
	S -> COLON [label=":"];
	S -> SEMI [label=";"];
	S -> LPAREN [label="("];
	S -> RPAREN [label=")"];
	S -> LBRACK [label="["];
	S -> RBRACK [label="]"];
	S -> PLUS [label="+"];
	S -> MINUS [label="-"];
	S -> MULT [label="*"];
	S -> DIV [label="/"];
	S -> EQ [label="="];
	
	S -> LESSER [label="<"];
	LESSER -> NEQ [label=">"];
	S -> GREATER [label=">"];
	LESSER -> LESSEREQ [label="="];
	GREATER -> GREATEREQ [label="="];
	S -> AND [label="&"];
	S -> OR [label="|"];

	COLON -> ASSIGN [label="="];

	//	comments
	COMMENT_BEGIN, _COMMENT_END [shape=circle];
	DIV -> COMMENT_BEGIN [label="*"];
	COMMENT_BEGIN -> COMMENT_BEGIN [label="[^*]"]
	COMMENT_BEGIN -> _COMMENT_END [label="*"];
	_COMMENT_END -> COMMENT_BEGIN [label="[^/]"];
	_COMMENT_END -> COMMENT [label="/"];

	//	data
	ID;
	S -> ID [label="[a-zA-Z_]"];
	ID -> ID [label="[a-zA-Z0-9_]"];

	INTLIT;
	S -> INTLIT [label="[0-9]"];
	INTLIT -> INTLIT [label="[0-9]"];

	STRLIT;
	STRLIT_PART [shape=circle];	//	not an accept state
	S -> STRLIT_PART [label="\""];
	STRLIT_PART -> STRLIT_PART [label="[^\"\\]"];
	STRLIT_PART -> STRLIT [label="\""];
	STRLIT_SLASH [shape=circle];
	STRLIT_PART -> STRLIT_SLASH [label="[\\]"];
	STRLIT_SLASH -> STRLIT_PART [label="[\\nt\"]"];
	STRLIT_SLASH_DECIMAL1 [shape=circle];
	STRLIT_SLASH -> STRLIT_SLASH_DECIMAL1 [label="[0-9]"];
	STRLIT_SLASH_DECIMAL2 [shape=circle];
	STRLIT_SLASH_DECIMAL1 -> STRLIT_SLASH_DECIMAL2 [label="[0-9]"];
	STRLIT_SLASH_DECIMAL2 -> STRLIT_PART [label="[0-9]"];
	STRLIT_SLASH_CONTROL [shape=circle];
	STRLIT_SLASH -> STRLIT_SLASH_CONTROL [label="[\\^]"];
	STRLIT_SLASH_CONTROL -> STRLIT_PART [label="[\\@A-Z\\[\\]^_.]"];
}